//| mill-version: 1.0.1
package build
import mill._
import mill.scalajslib._
import mill.scalalib._

object Versions {
  val scala2 = "2.13.16"
  val scala3 = "3.7.1"

  val guava = "33.4.8-jre"
  val jsr305 = "3.0.2"
  val scalatest = "3.2.19"
  val scalatestplusScalacheck = "3.2.14.0"
  val scalacheck = "1.18.1"
  val jetty = "12.0.23"
  val mongo = "5.5.1"
  val spring = "5.3.39"
  val typesafeConfig = "1.4.4"
  val commonsIo = "1.3.2"
  val scalaLogging = "3.9.5"
  val pekko = "1.1.4"
  val monix = "3.4.1"
  val circe = "0.14.5"
  val upickle = "3.1.2"
  val scalajsBenchmark = "0.10.0"
  val slf4j = "2.0.17"
}

//todo: remove os.up fiku-miku

trait SharedModule extends PlatformScalaModule {
  def scalaVersion = Versions.scala3

  override def scalacOptions = Seq(
    "-encoding",
    "utf-8",
    "-explaintypes",
    "-feature",
    "-deprecation",
    "-unchecked",
    "-language:implicitConversions",
    "-language:existentials",
    "-language:dynamics",
    "-language:experimental.macros",
    "-language:higherKinds",
    "-Xignore-scala2-macros",
    "-Wconf:msg=Scala 2 macro cannot be used in Dotty.*:silent"
    // "-Werror",
    // "-Ycheck:all",
    // "-Ydebug-error",
    // "-Ydebug-flags",
    // "-Ydebug-missing-refs",
    // "-Yprint-debug"
  )

  override def mvnDeps = super.mvnDeps() ++ Seq(mvn"org.scala-lang::scala3-library:${Versions.scala3}")

  trait SharedTest extends ScalaTests with TestModule.ScalaTest {
    def scalaTestVersion = "3.2.19"

    override def mvnDeps = super.mvnDeps() ++ Seq(
      mvn"org.scalatestplus::scalacheck-1-16:${Versions.scalatestplusScalacheck}",
      mvn"org.scalacheck::scalacheck:${Versions.scalacheck}"
    )
  }
}

trait JvmModule extends SharedModule {
  trait TestModule extends SharedTest
}

trait JsModule extends SharedModule with ScalaJSModule {
  def scalaJSVersion = "1.19.0"

  trait TestModule extends SharedTest with ScalaJSTests
}

object macros extends Module {
  trait macrosModule extends SharedModule {
    override def mvnDeps = super.mvnDeps() ++ Seq(mvn"org.scala-lang:scala-reflect:${Versions.scala2}")
  }
  object jvm extends macrosModule with JvmModule
  object js extends macrosModule with JsModule
}

object core extends Module {
  def moduleDeps = Seq(macros)

  trait CoreModule extends SharedModule {
    override def mvnDeps = super.mvnDeps() ++ Seq(mvn"io.monix::monix:${Versions.monix}")
  }

  object jvm extends CoreModule with JvmModule {
    def moduleDeps = Seq(macros.jvm)
    override def mvnDeps = super.mvnDeps() ++ Seq(mvn"com.google.guava:guava:${Versions.guava}")

    object test extends TestModule
  }

  object js extends CoreModule with JsModule {
    def moduleDeps = Seq(macros.js)
    object test extends TestModule
  }
}
